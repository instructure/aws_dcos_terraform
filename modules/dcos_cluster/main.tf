module "default_sec_group" {
  source       = "../default_sec_group"
  cluster_name = "${var.cluster_name}"
  vpc_id       = "${var.vpc_id}"
  network      = "${var.network}"
}

module "master_internal_lb" {
  source                 = "../dcos_master_internal_lb"
  cluster_name           = "${var.cluster_name}"
  vpc_id                 = "${var.vpc_id}"
  network                = "${var.network}"
  private_subnets        = "${var.private_subnets}"
  default_security_group = "${module.default_sec_group.id}"
  extra_security_groups  = "${var.extra_master_internal_sec_groups}"
}

module "dcos_bootstrap" {
  source             = "../dcos_bootstrap"
  region             = "${var.region}"
  cluster_name       = "${var.cluster_name}"
  dcos_url           = "${var.dcos_url}"
  dcos_version       = "${var.dcos_version}"
  master_elb_dnsname = "${module.master_internal_lb.elb_dns}"
  bucket             = "${var.bucket}"
  build_script_path  = "${var.bootstrap_build_script_path}"
  role_arn           = "${var.bootstrap_role_arn}"
}

module "masters" {
  source                    = "../dcos_master_group"
  region                    = "${var.region}"
  region_azs                = "${var.region_azs}"
  vpc_id                    = "${var.vpc_id}"
  network                   = "${var.network}"
  cluster_name              = "${var.cluster_name}"
  key_name                  = "${var.key_name}"
  public_subnets            = "${var.public_subnets}"
  private_subnets           = "${var.private_subnets}"
  coreos_ami                = "${var.coreos_ami}"
  instance_type             = "${var.master_instance_type}"
  default_security_group    = "${module.default_sec_group.id}"
  extra_security_groups     = "${var.extra_master_sec_groups}"
  root_volume_size          = "${var.master_root_volume_size}"
  max_size                  = "${var.master_count}"
  min_size                  = "${var.master_count}"
  desired_capacity          = "${var.master_count}"
  master_internal_lb        = "${module.master_internal_lb.elb}"
  cloud_config_template     = "${var.master_cloud_config_template}"
  bucket_name               = "${var.bucket}"
  dcos_version              = "${var.dcos_version}"
  dcos_install_path         = "${module.dcos_bootstrap.dcos_install_path}"
  exhibitor_bucket          = "${var.bucket}"
  work_bucket               = "${var.bucket}"
  idle_timeout              = "${var.master_idle_timeout}"
  ssl_arn                   = "${var.master_ssl_arn}"
  tags                      = ["${concat(var.common_tags, var.master_tags)}"]
  enable_init_hook          = "${var.master_enable_init_hook}"
  override_asg_name         = "${var.master_override_asg_name}"
  override_launch_hook_name = "${var.master_override_launch_hook_name}"
  lifecycle_action_result   = "${var.master_lifecycle_action_result}"
}

module "agents" {
  source                    = "../dcos_agent_group"
  region                    = "${var.region}"
  region_azs                = "${var.region_azs}"
  vpc_id                    = "${var.vpc_id}"
  network                   = "${var.network}"
  cluster_name              = "${var.cluster_name}"
  key_name                  = "${var.key_name}"
  private_subnets           = "${var.private_subnets}"
  coreos_ami                = "${var.coreos_ami}"
  instance_type             = "${coalesce(var.private_agent_instance_type, var.agent_instance_type)}"
  default_security_group    = "${module.default_sec_group.id}"
  extra_security_groups     = "${var.extra_agent_sec_groups}"
  root_volume_size          = "${var.agent_root_volume_size}"
  max_size                  = "${var.max_agent_count}"
  min_size                  = "${var.min_agent_count}"
  desired_capacity          = "${var.agent_count}"
  cloud_config_template     = "${var.agent_cloud_config_template}"
  bucket_name               = "${var.bucket}"
  dcos_version              = "${var.dcos_version}"
  dcos_install_path         = "${module.dcos_bootstrap.dcos_install_path}"
  work_bucket               = "${var.bucket}"
  http_instance_port        = "${var.agent_http_instance_port}"
  https_instance_port       = "${var.agent_https_instance_port}"
  idle_timeout              = "${var.agent_idle_timeout}"
  tags                      = ["${concat(var.common_tags, var.agent_tags)}"]
  enable_init_hook          = "${var.agent_enable_init_hook}"
  override_asg_name         = "${var.agent_override_asg_name}"
  override_launch_hook_name = "${var.agent_override_launch_hook_name}"
  lifecycle_action_result   = "${var.agent_lifecycle_action_result}"
}

module "public_agents" {
  source                    = "../dcos_public_agent_group"
  region                    = "${var.region}"
  region_azs                = "${var.region_azs}"
  vpc_id                    = "${var.vpc_id}"
  network                   = "${var.network}"
  cluster_name              = "${var.cluster_name}"
  key_name                  = "${var.key_name}"
  instance_subnets          = "${var.private_subnets}"
  elb_subnets               = "${var.public_subnets}"
  coreos_ami                = "${var.coreos_ami}"
  instance_type             = "${coalesce(var.public_agent_instance_type, var.agent_instance_type)}"
  default_security_group    = "${module.default_sec_group.id}"
  extra_security_groups     = "${var.extra_public_agent_sec_groups}"
  root_volume_size          = "${var.public_agent_root_volume_size}"
  max_size                  = "${var.max_public_agent_count}"
  min_size                  = "${var.min_public_agent_count}"
  desired_capacity          = "${var.public_agent_count}"
  cloud_config_template     = "${var.public_agent_cloud_config_template}"
  bucket_name               = "${var.bucket}"
  dcos_version              = "${var.dcos_version}"
  dcos_install_path         = "${module.dcos_bootstrap.dcos_install_path}"
  work_bucket               = "${var.bucket}"
  http_instance_port        = "${var.public_agent_http_instance_port}"
  https_instance_port       = "${var.public_agent_https_instance_port}"
  idle_timeout              = "${var.public_agent_idle_timeout}"
  tags                      = ["${concat(var.common_tags, var.public_agent_tags)}"]
  enable_init_hook          = "${var.public_agent_enable_init_hook}"
  override_asg_name         = "${var.public_agent_override_asg_name}"
  override_launch_hook_name = "${var.public_agent_override_launch_hook_name}"
  lifecycle_action_result   = "${var.public_agent_lifecycle_action_result}"
}
